/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aws.cloud.proxy;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.UnknownHostException;
import java.util.Base64;

/**
 * https://tools.ietf.org/html/rfc1928
 * Sock2http
 * 
 * @author fox0r47
 *
 */
public class App {
	private static URI socksUrl;
	private static URI httpUrl;
	
	public static void main(String[] args) throws IOException, URISyntaxException {
    	if(args.length != 2) {
    		System.out.println("Usage: java -jar aws-cloud-proxy.jar socks5://bind-ip:bind-port/ http://username:password@remote-host:remote-port/");
    		System.out.println("Example: java -jar aws-cloud-proxy.jar socks5://127.0.0.1:1080/ http://10.252.76.110:8080/");
    		System.out.println("Example: java -jar aws-cloud-proxy.jar socks5://127.0.0.1:1080/ http://VWUSER:Password@10.252.76.110:8080/");
    		System.exit(1);
    	}

    	socksUrl = new URI(args[0]);
    	httpUrl = new URI(args[1]);

    	int port = socksUrl.getPort();
    	if(port <= 0) {
    		port = 1080;
    	}
    	InetAddress socksAddr = InetAddress.getByName(socksUrl.getHost());
    	
    	System.out.println("Start socks server.");

    	System.out.println("Bind-Socket " + socksAddr.getHostAddress() + " " + port);
    	try(ServerSocket server = new ServerSocket(socksUrl.getPort(), 0, socksAddr)) {
        	Socket client;
        	while((client = server.accept()) != null) {
        		System.out.println("Accept client.");
        		InputStream is = client.getInputStream();
        		OutputStream os = client.getOutputStream();
        		boolean close = true;
        		try {
        			close = !doClient(client, is, os);
        		} catch(IOException e) {
        			System.out.println("Socket exception: " + e.getMessage());
        		}

        		if(close) {
        			is.close();
        			os.close();
        			client.close();
        		}
        	}
    	}
    }

    private static boolean doClient(Socket client, InputStream is, OutputStream os) throws IOException {
		int version = readByte(is);
		if(version != 5) {
			System.out.println("Unknown Version " + version + " require 5.");
			return false;
		}
		os.write(version);

		int nmethods  = readByte(is);
		System.out.println("methods count: " + nmethods);
		if(nmethods < 1 || nmethods > 255) {
			System.out.println("Unknown nmethods " + nmethods + " require nmethods >= 1 && nmethods <= 255.");
			return false;
		}
		for(int i=0;i<nmethods;++i) {
			int method  = readByte(is);
			System.out.println("method: " + method);
		}
		os.write(0); // NO AUTH

		version = readByte(is);
		if(version != 5) {
			System.out.println("Unknown Version " + version + " require 5.");
			return false;
		}
		os.write(version);

		int cmd = readByte(is);
		if(cmd != 1) {
			System.out.println("Unknown CMD " + cmd + " require 1.");
			return false;
		}

		int rsv = readByte(is);
		if(rsv != 0) {
			System.out.println("Unknown RSV " + rsv + " require 0.");
			return false;
		}

		int atyp = readByte(is);
		if(atyp != 3) {
			System.out.println("Unknown ATYP " + atyp + " require 3.");
			return false;
		}

		String domain = recvDomain(is);
		System.out.println("Domain: " + domain);

		int porta = readByte(is);
		int portb = readByte(is);
		int port = (porta << 8) + portb;
		System.out.println("Port: " + port);

		SocketPair remote = connect(httpUrl, domain, port);
		if(remote == null) {
			os.write(5); // X'05' Connection refused
			os.write(0); // RSV
			os.write(1); // ATYP IP V4 address: X'01'
			os.write(0); // IP1
			os.write(0); // IP2
			os.write(0); // IP3
			os.write(0); // IP4
			os.write(0); // PORT1
			os.write(0); // PORT2
			return false;
		}

		os.write(0); // X'00' succeeded
		os.write(0); // RSV
		os.write(1); // ATYP IP V4 address: X'01'
		os.write(0); // IP1
		os.write(0); // IP2
		os.write(0); // IP3
		os.write(0); // IP4
		os.write(0); // PORT1
		os.write(0); // PORT2

		remote.pipe(new SocketPair(client, is, os));
		return true;
    }

    private static SocketPair connect(URI httpProxy, String host, int port) {
    	int proxyPort = httpProxy.getPort();
    	if(proxyPort <= 0) {
    		proxyPort = 8080;
    	}

    	try {
        	System.out.println("Connect-Socket " + httpProxy.getHost() + " " + proxyPort);

	    	Socket socket = new Socket(httpProxy.getHost(), proxyPort);
	    	InputStream is = socket.getInputStream();
	    	OutputStream os = socket.getOutputStream();
			String connect = "CONNECT " + host + ":" + port + " HTTP/1.1\r\n";
			os.write(connect.getBytes());

			String userInfo = httpProxy.getUserInfo();
			if(userInfo != null && userInfo.contains(":")) {
				System.out.println("Send authentication.");
				String authorization = "Authorization: Basic " + Base64.getEncoder().encodeToString(userInfo.getBytes()) + "\r\n";
				os.write(authorization.getBytes());
			}
			
			os.write("\r\n".getBytes());
			String line = readLine(is);
			if(line.startsWith("HTTP/1.1 200")) {
				System.out.println(line.trim());
				for(;;) {
					line = readLine(is);
					if(line.equals("\r\n") || line.length() == 0) {
						break;
					}
	    			System.out.println(line.trim());
				}
				System.out.println("Connection established.");
			}
			else {
				System.out.println("Connection failed: " + line.trim());
				is.close();
				os.close();
				socket.close();
				return null;
			}
			return new SocketPair(socket, is, os);
		} catch (UnknownHostException e) {
			System.out.println("Could not connect to proxy: " + e.getMessage());
			return null;
		} catch (IOException e) {
			System.out.println("Proxy error: " + e.getMessage());
			return null;
		}
    }

    private static int readByte(InputStream is) {
    	try {
        	return is.read();
    	} catch(IOException e) {
    		return -1;
    	}
    }

    private static String readLine(InputStream is) {
    	String result = "";
		int b;
		while((b = readByte(is)) >= 0) {
			char c = (char)b;
			result += c;
			if(c == '\n' || c == '\0') {
				break;
			}
		}
		return result;
    }
    
    private static String recvDomain(InputStream is) {
    	int len =  readByte(is);
    	if(len <= 0) {
    		System.out.println("Wrong Domain length.");
    		return null;
    	}
    	String result = "";
    	for(int i=0;i<len;++i) {
    		int b = readByte(is);
    		char c = (char)b;
    		result += c;
    	}
    	return result;
    }
}
